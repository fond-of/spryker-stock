<?php

namespace FondOfSpryker\Zed\Stock\Business\DataProvider\Plugin;

use Codeception\Test\Unit;
use Generated\Shared\Transfer\StoreTransfer;
use Spryker\Zed\Stock\Dependency\Facade\StockToStoreFacadeInterface;

/**
 * Auto-generated group annotations
 * @group FondOfSpryker
 * @group Zed
 * @group Stock
 * @group Business
 * @group DataProvider
 * @group Plugin
 * @group StoreDataProviderPluginTest
 * Add your own group annotations below this line
 */
class StoreDataProviderPluginTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\Stock\Business\DataProvider\Plugin\StoreDataProviderPlugin
     */
    protected $plugin;

    /**
     * @return void
     */
    public function setUp(): void
    {
        $this->plugin = new StoreDataProviderPlugin($this->createStockToStoreFacadeBridgeMock());
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     */
    public function testGetName(): void
    {
        $this->assertSame(StoreDataProviderPlugin::DATA_TYPE, $this->plugin->getName());
    }

    /**
     * @return void
     */
    public function testGetDataAsArray(): void
    {
        $stores = $this->plugin->getDataAsArray();
        $this->assertTrue(is_array($stores));
        $this->assertArrayHasKey(1, $stores);
        $this->assertArrayHasKey(2, $stores);
        $this->assertSame($stores[1], 'a');
        $this->assertSame($stores[2], 'b');
    }

    /**
     * @return void
     */
    public function testGetDataAsArrayNoStoresConfigured(): void
    {
        $plugin = new StoreDataProviderPlugin($this->createStockToStoreFacadeBridgeMock(true));
        $stores = $plugin->getDataAsArray();
        $this->assertTrue(is_array($stores));
        $this->assertCount(0, $stores);
    }

    /**
     * @param  bool  $emtpy
     * @return \PHPUnit\Framework\MockObject\MockObject
     */
    protected function createStockToStoreFacadeBridgeMock(bool $emtpy = false)
    {
        $mock = $this->getMockBuilder(StockToStoreFacadeInterface::class)->disableOriginalConstructor()->setMethods([
            'getAllStores', 'getCurrentStore'
        ])->getMock();
        $stores = [];
        if (!$emtpy) {
            $stores[] = $this->createStoreTransferMock(1, 'a');
            $stores[] = $this->createStoreTransferMock(2, 'b');
        }
        $mock->method('getAllStores')->willReturn($stores);

        return $mock;
    }

    /**
     * @param  int  $storeId
     * @param  string  $name
     * @return \PHPUnit\Framework\MockObject\MockObject
     */
    protected function createStoreTransferMock(int $storeId, string $name)
    {
        $storeTransferMock = $this->getMockBuilder(StoreTransfer::class)->setMethods([
            'getIdStore', 'getName'
        ])->getMock();
        $storeTransferMock->method('getIdStore')->willReturn($storeId);
        $storeTransferMock->method('getName')->willReturn($name);
        return $storeTransferMock;
    }
}
