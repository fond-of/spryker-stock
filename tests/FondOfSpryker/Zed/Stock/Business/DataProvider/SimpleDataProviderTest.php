<?php

namespace FondOfSpryker\Zed\Stock\Business\DataProvider;

use Codeception\Test\Unit;
use FondOfSpryker\Zed\Stock\Business\DataProvider\SimpleDataProvider;
use FondOfSpryker\Zed\Stock\Communication\Dependency\DataProviderInterface;
use FondOfSpryker\Zed\Stock\Exception\DataTypeNotExistsException;

/**
 * Auto-generated group annotations
 * @group FondOfSpryker
 * @group Zed
 * @group Stock
 * @group Business
 * @group DataProvider
 * @group SimpleDataProviderTest
 * Add your own group annotations below this line
 */
class SimpleDataProviderTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\Stock\Business\DataProvider\SimpleDataProvider
     */
    protected $provider;

    /**
     * @return void
     */
    public function setUp(): void
    {
        $this->provider = new SimpleDataProvider();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testRegisterDataProvider()
    {
        $dataProvider = $this->createDataProviderMock('testing');
        $this->provider->registerDataProvider($dataProvider);

        $registeredProvider = $this->provider->getRegisteredDataProviderTypes();

        $this->assertTrue(in_array('testing', $registeredProvider));
    }

    /**
     * @expectedException \FondOfSpryker\Zed\Stock\Exception\DataTypeNotExistsException
     */
    public function testGetWillThrowException()
    {
        $this->provider->get('exception');
    }

    public function testGet()
    {
        $dataProvider = $this->createDataProviderMock('testing');
        $this->provider->registerDataProvider($dataProvider);
        $arrayData = $this->provider->get('testing');
        $this->assertArrayHasKey(1, $arrayData);
        $this->assertSame('a', $arrayData[1]);
    }

    public function testGetRegisteredDataProviderTypes()
    {
        $this->provider->registerDataProvider($this->createDataProviderMock('testing1'));
        $this->provider->registerDataProvider($this->createDataProviderMock('testing2'));
        $types = $this->provider->getRegisteredDataProviderTypes();
        $this->assertTrue(in_array('testing1', $types) );
        $this->assertTrue(in_array('testing2', $types) );
    }

    public function testGetRegisteredDataProviderTypesAsString()
    {
        $this->provider->registerDataProvider($this->createDataProviderMock('testing1'));
        $this->provider->registerDataProvider($this->createDataProviderMock('testing2'));
        $types = $this->provider->getRegisteredDataProviderTypesAsString();
        $this->assertSame('-> testing1
-> testing2', $types);
    }

    /**
     * @return \PHPUnit\Framework\MockObject\MockObject
     */
    protected function createDataProviderMock(string $providerName)
    {
        $mock = $this->getMockBuilder(DataProviderInterface::class)
            ->disableOriginalConstructor()
            ->setMethods(['getDataAsArray', 'getName'])
            ->getMock();
        $mock->method('getName')->willReturn($providerName);
        $mock->method('getDataAsArray')->willReturn([1 => 'a']);
        return $mock;
    }
}
